{
    "sourceFile": "src/controllers/user.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754822228738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754822228738,
            "name": "Commit-0",
            "content": "import { Request, Response } from 'express';\nimport { prisma } from '../server';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport { sendSuccess, sendError } from '../utils/response.util';\nimport { ApiError, NotFoundError, BadRequestError, ForbiddenError } from '../utils/errors.util';\nimport { toNumber } from '../utils/type.util';\n\n// Register a new user\nexport const register = async (req: Request, res: Response) => {\n  try {\n    const { email, password, firstName, lastName } = req.body;\n\n    // Check if user already exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (existingUser) {\n      throw new BadRequestError('User already exists with this email');\n    }\n\n    // Hash password\n    const salt = await bcrypt.genSalt(10);\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    // Create new user\n    const newUser = await prisma.user.create({\n      data: {\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n        role: 'MEMBER', // Default role\n      },\n    });\n\n    // Remove password from response\n    const { password: _, ...userWithoutPassword } = newUser;\n\n    sendSuccess(res, 201, 'User registered successfully', { user: userWithoutPassword });\n  } catch (error) {\n    console.error('Registration error:', error);\n\n    if (error instanceof ApiError) {\n      sendError(res, error.statusCode, error.message);\n      return;\n    }\n\n    sendError(res, 500, 'Server error during registration',\n      error instanceof Error ? error.message : 'Unknown error');\n  }\n};\n\n// Login user\nexport const login = async (req: Request, res: Response) => {\n  try {\n    const { email, password } = req.body;\n\n    // Find user by email\n    const user = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      throw new BadRequestError('Invalid email or password');\n    }\n\n    // Check if user is active\n    if (!user.active) {\n      throw new ForbiddenError('Account is deactivated');\n    }\n\n    // Verify password\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    if (!isPasswordValid) {\n      throw new BadRequestError('Invalid email or password');\n    }\n\n    // Generate access token with shorter expiration\n    const token = jwt.sign(\n      { userId: user.id, role: user.role },\n      process.env.JWT_SECRET as string,\n      { expiresIn: '1h' }\n    );\n\n    // Generate refresh token with longer expiration\n    const refreshToken = jwt.sign(\n      { userId: user.id },\n      process.env.JWT_REFRESH_SECRET as string,\n      { expiresIn: '7d' }\n    );\n\n    // Remove password from response\n    const { password: _, ...userWithoutPassword } = user;\n\n    sendSuccess(res, 200, 'Login successful', {\n      user: userWithoutPassword,\n      token,\n      refreshToken\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n\n    if (error instanceof ApiError) {\n      sendError(res, error.statusCode, error.message);\n      return;\n    }\n\n    sendError(res, 500, 'Server error during login',\n      error instanceof Error ? error.message : 'Unknown error');\n  }\n};\n\n// Get current user profile\nexport const getCurrentUser = async (req: Request, res: Response) => {\n  try {\n    if (!req.user) { // Add this check\n      return sendError(res, 401, 'User not authenticated');\n    }\n    const userId = toNumber(req.user.id);\n\n    const user = await prisma.user.findUnique({\n      where: { id: userId },\n    });\n\n    if (!user) {\n      throw new NotFoundError('User');\n    }\n\n    // Remove password from response\n    const { password: _, ...userWithoutPassword } = user;\n\n    sendSuccess(res, 200, 'User profile retrieved successfully', userWithoutPassword);\n  } catch (error) {\n    console.error('Get user error:', error);\n\n    if (error instanceof ApiError) {\n      sendError(res, error.statusCode, error.message);\n      return;\n    }\n\n    sendError(res, 500, 'Server error while fetching user',\n      error instanceof Error ? error.message : 'Unknown error');\n  }\n};\n\n// Admin: Get all users\nexport const getAllUsers = async (req: Request, res: Response) => {\n  try {\n    const users = await prisma.user.findMany({\n      select: {\n        id: true,\n        email: true,\n        firstName: true,\n        lastName: true,\n        role: true,\n        active: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    });\n\n    sendSuccess(res, 200, 'Users retrieved successfully', users);\n  } catch (error) {\n    console.error('Get all users error:', error);\n    sendError(res, 500, 'Server error while fetching users',\n      error instanceof Error ? error.message : 'Unknown error');\n  }\n};\n\n// Admin: Update user\nexport const updateUser = async (req: Request, res: Response) => {\n  if (!req.user) {\n    return sendError(res, 401, 'User not authenticated');\n  }\n  const userIdToUpdate = toNumber(req.params.id);\n  const loggedInUserId = toNumber(req.user.id);\n  const loggedInUserRole = req.user.role;\n\n  if (isNaN(userIdToUpdate)) {\n    return sendError(res, 400, 'Invalid user ID.');\n  }\n\n  try {\n    const { email, firstName, lastName, role, active } = req.body;\n\n    if (userIdToUpdate === 0) {\n      throw new BadRequestError('Invalid user ID');\n    }\n\n    // Check if user exists\n    const existingUser = await prisma.user.findUnique({\n      where: { id: userIdToUpdate },\n    });\n\n    if (!existingUser) {\n      throw new NotFoundError('User');\n    }\n\n    const updatedUser = await prisma.user.update({\n      where: { id: userIdToUpdate },\n      data: {\n        email,\n        firstName,\n        lastName,\n        role,\n        active,\n      },\n    });\n\n    // Remove password from response\n    const { password: _, ...userWithoutPassword } = updatedUser;\n\n    sendSuccess(res, 200, 'User updated successfully', userWithoutPassword);\n  } catch (error) {\n    console.error('Update user error:', error);\n\n    if (error instanceof ApiError) {\n      sendError(res, error.statusCode, error.message);\n      return;\n    }\n\n    sendError(res, 500, 'Server error while updating user',\n      error instanceof Error ? error.message : 'Unknown error');\n  }\n};\n\n// Admin: Delete user\nexport const deleteUser = async (req: Request, res: Response) => {\n  if (!req.user) {\n    return sendError(res, 401, 'User not authenticated');\n  }\n  const userIdToDelete = toNumber(req.params.id);\n  const loggedInUserId = toNumber(req.user.id);\n  const loggedInUserRole = req.user.role;\n\n  if (isNaN(userIdToDelete)) {\n    return sendError(res, 400, 'Invalid user ID.');\n  }\n\n  try {\n    if (userIdToDelete === 0) {\n      throw new BadRequestError('Invalid user ID');\n    }\n\n    // First, check if user exists\n    const user = await prisma.user.findUnique({\n      where: { id: userIdToDelete },\n    });\n\n    if (!user) {\n      throw new NotFoundError('User');\n    }\n\n    // First delete all prayer pairings associated with this user\n    // This is needed because of foreign key constraints\n    await prisma.prayerPairing.deleteMany({\n      where: {\n        OR: [\n          { partner1Id: userIdToDelete },\n          { partner2Id: userIdToDelete }\n        ]\n      }\n    });\n\n    // Now delete the user\n    await prisma.user.delete({\n      where: { id: userIdToDelete },\n    });\n\n    sendSuccess(res, 200, 'User deleted successfully');\n  } catch (error) {\n    console.error('Delete user error:', error);\n\n    if (error instanceof ApiError) {\n      sendError(res, error.statusCode, error.message);\n      return;\n    }\n\n    sendError(res, 500, 'Server error while deleting user',\n      error instanceof Error ? error.message : 'Unknown error');\n  }\n};\n"
        }
    ]
}