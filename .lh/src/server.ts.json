{
    "sourceFile": "src/server.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1746509725702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746545404026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,12 @@\n \n // Security middleware\n app.use(helmet());\n app.use(cors({\n-  origin: process.env.FRONTEND_URL || 'http://localhost:4200',\n+  origin: [\n+    'https://prayer-partners-app.vercel.app',\n+    'https://prayer-partners-h2y0e0bhn-musyokis-projects-31dc945d.vercel.app'\n+  ],\n   credentials: true\n }));\n \n // Rate limiting\n@@ -94,11 +97,15 @@\n // Global error logger and handler\n app.use(errorLogger);\n app.use(errorHandler);\n \n+//configure cors for development\n+\n+\n+\n // Configure CORS for production\n const corsOptions = {\n-  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',\n+  origin: process.env.CORS_ORIGIN || 'http://localhost:4200',\n   methods: ['GET', 'POST', 'PUT', 'DELETE'],\n   credentials: true,\n };\n app.use(cors(corsOptions));\n"
                },
                {
                    "date": 1746546329700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,12 +38,16 @@\n \n // Security middleware\n app.use(helmet());\n app.use(cors({\n-  origin: [\n-    'https://prayer-partners-app.vercel.app',\n-    'https://prayer-partners-h2y0e0bhn-musyokis-projects-31dc945d.vercel.app'\n-  ],\n+  origin: process.env.NODE_ENV === 'production' \n+    ? [\n+        'https://prayer-partners-app.vercel.app',\n+        'https://prayer-partners-h2y0e0bhn-musyokis-projects-31dc945d.vercel.app'\n+      ]\n+\n+    : ['http://localhost:4200', 'http://localhost:3000', 'http://localhost:8080'],\n+  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n   credentials: true\n }));\n \n // Rate limiting\n@@ -52,10 +56,10 @@\n   max: 100 // limit each IP to 100 requests per windowMs\n });\n \n // Apply rate limiting to all routes\n+\n app.use(limiter);\n-\n // Rate limits for authentication routes\n const authLimiter = rateLimit({\n   windowMs: 15 * 60 * 1000, // 15 minutes\n   max: 20 // limit each IP to 20 login attempts per 15 minutes\n"
                },
                {
                    "date": 1746546344310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,8 @@\n     ? [\n         'https://prayer-partners-app.vercel.app',\n         'https://prayer-partners-h2y0e0bhn-musyokis-projects-31dc945d.vercel.app'\n       ]\n-\n     : ['http://localhost:4200', 'http://localhost:3000', 'http://localhost:8080'],\n   methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n   credentials: true\n }));\n@@ -56,9 +55,8 @@\n   max: 100 // limit each IP to 100 requests per windowMs\n });\n \n // Apply rate limiting to all routes\n-\n app.use(limiter);\n // Rate limits for authentication routes\n const authLimiter = rateLimit({\n   windowMs: 15 * 60 * 1000, // 15 minutes\n"
                },
                {
                    "date": 1746546556879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,18 +99,21 @@\n // Global error logger and handler\n app.use(errorLogger);\n app.use(errorHandler);\n \n-//configure cors for development\n-\n-\n-\n-// Configure CORS for production\n+// Update CORS configuration to ensure proper handling of development and production environments\n const corsOptions = {\n-  origin: process.env.CORS_ORIGIN || 'http://localhost:4200',\n-  methods: ['GET', 'POST', 'PUT', 'DELETE'],\n+  origin: process.env.NODE_ENV === 'production'\n+    ? [\n+        'https://prayer-partners-app.vercel.app',\n+        'https://prayer-partners-h2y0e0bhn-musyokis-projects-31dc945d.vercel.app'\n+      ]\n+    : ['http://localhost:4200', 'http://localhost:3000', 'http://localhost:8080'],\n+  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n   credentials: true,\n };\n+\n+// Apply updated CORS configuration\n app.use(cors(corsOptions));\n \n // Increase rate limits for production\n const productionLimiter = rateLimit({\n"
                },
                {
                    "date": 1746566619156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n dotenv.config();\n \n // Initialize Express app\n const app: Express = express();\n-const port = process.env.PORT || 3000;\n+const port = process.env.PORT || 8080;\n \n // Create logs directory if it doesn't exist\n const logsDir = path.join(__dirname, '../logs');\n if (!fs.existsSync(logsDir)) {\n@@ -35,29 +35,31 @@\n \n // Initialize Prisma client\n export const prisma = new PrismaClient();\n \n-// Security middleware\n-app.use(helmet());\n+// Allow all origins and methods for CORS\n app.use(cors({\n-  origin: process.env.NODE_ENV === 'production' \n-    ? [\n-        'https://prayer-partners-app.vercel.app',\n-        'https://prayer-partners-h2y0e0bhn-musyokis-projects-31dc945d.vercel.app'\n-      ]\n-    : ['http://localhost:4200', 'http://localhost:3000', 'http://localhost:8080'],\n-  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n-  credentials: true\n+  origin: '*', // Allow all origins\n+  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], // Allow all common methods\n+  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept'],\n+  credentials: true, // Allow cookies/authorization headers\n+  maxAge: 86400 // Cache preflight requests for 1 day\n }));\n \n+// Security middleware\n+app.use(helmet({\n+  crossOriginResourcePolicy: { policy: 'cross-origin' }\n+}));\n+\n // Rate limiting\n const limiter = rateLimit({\n   windowMs: 15 * 60 * 1000, // 15 minutes\n   max: 100 // limit each IP to 100 requests per windowMs\n });\n \n // Apply rate limiting to all routes\n app.use(limiter);\n+\n // Rate limits for authentication routes\n const authLimiter = rateLimit({\n   windowMs: 15 * 60 * 1000, // 15 minutes\n   max: 20 // limit each IP to 20 login attempts per 15 minutes\n@@ -99,33 +101,8 @@\n // Global error logger and handler\n app.use(errorLogger);\n app.use(errorHandler);\n \n-// Update CORS configuration to ensure proper handling of development and production environments\n-const corsOptions = {\n-  origin: process.env.NODE_ENV === 'production'\n-    ? [\n-        'https://prayer-partners-app.vercel.app',\n-        'https://prayer-partners-h2y0e0bhn-musyokis-projects-31dc945d.vercel.app'\n-      ]\n-    : ['http://localhost:4200', 'http://localhost:3000', 'http://localhost:8080'],\n-  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n-  credentials: true,\n-};\n-\n-// Apply updated CORS configuration\n-app.use(cors(corsOptions));\n-\n-// Increase rate limits for production\n-const productionLimiter = rateLimit({\n-  windowMs: 15 * 60 * 1000, // 15 minutes\n-  max: 100, // 100 requests per windowMs\n-});\n-\n-if (process.env.NODE_ENV === 'production') {\n-  app.use(productionLimiter);\n-}\n-\n // Start server\n prisma.$connect()\n   .then(() => {\n     logger.info('Database connection established');\n"
                },
                {
                    "date": 1746676404458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n // Import services\n import { schedulePairingGeneration } from './services/scheduler.service';\n \n // Load environment variables\n-dotenv.config();\n+dotenv.config({ override: true });\n \n // Initialize Express app\n const app: Express = express();\n const port = process.env.PORT || 8080;\n@@ -35,22 +35,49 @@\n \n // Initialize Prisma client\n export const prisma = new PrismaClient();\n \n-// Allow all origins and methods for CORS\n+// Security middleware\n+app.use(helmet());\n+\n+// Updated CORS configuration\n+const getProductionAllowedOrigins = (): string[] => {\n+  const urls = process.env.FRONTEND_PRODUCTION_URLS; // Expects comma-separated URLs\n+  if (!urls) {\n+    return [];\n+  }\n+  return urls.split(',').map(url => url.trim()).filter(url => url.length > 0);\n+};\n+\n+const allowedOrigins = process.env.NODE_ENV === 'production'\n+  ? getProductionAllowedOrigins()\n+  : ['http://localhost:4200', 'http://localhost:3000', 'http://localhost:8080', 'http://localhost:5173']; // Development origins\n+\n+if (process.env.NODE_ENV === 'production' && allowedOrigins.length === 0) {\n+  logger.warn('FRONTEND_PRODUCTION_URLS is not set or is empty. CORS might block frontend requests in production.');\n+}\n+\n app.use(cors({\n-  origin: '*', // Allow all origins\n-  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], // Allow all common methods\n-  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept'],\n-  credentials: true, // Allow cookies/authorization headers\n-  maxAge: 86400 // Cache preflight requests for 1 day\n+  origin: (origin, callback) => {\n+    logger.info(`CORS Origin Check: Request origin: ${origin}`); // Log the incoming origin\n+    // Allow requests with no origin (like mobile apps or curl requests)\n+    if (!origin) {\n+      logger.info('CORS Origin Check: No origin, allowing.');\n+      return callback(null, true);\n+    }\n+    if (allowedOrigins.indexOf(origin) === -1) {\n+      logger.error(`CORS Origin Check: Origin '${origin}' NOT ALLOWED. Allowed list: [${allowedOrigins.join(', ')}]`);\n+      const msg = 'The CORS policy for this site does not allow access from the specified Origin.';\n+      return callback(new Error(msg), false);\n+    }\n+    logger.info(`CORS Origin Check: Origin '${origin}' ALLOWED.`);\n+    return callback(null, true);\n+  },\n+  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n+  credentials: true,\n+  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept']\n }));\n \n-// Security middleware\n-app.use(helmet({\n-  crossOriginResourcePolicy: { policy: 'cross-origin' }\n-}));\n-\n // Rate limiting\n const limiter = rateLimit({\n   windowMs: 15 * 60 * 1000, // 15 minutes\n   max: 100 // limit each IP to 100 requests per windowMs\n"
                },
                {
                    "date": 1746681925877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,8 +136,8 @@\n     app.listen(port, () => {\n       logger.info(`Server is running at http://localhost:${port}`);\n     });\n   })\n-  .catch((error) => {\n+  .catch((error: Error) => { // Added Error type\n     logger.error('Database connection failed', { error: error.message, stack: error.stack });\n     process.exit(1);\n   });\n"
                },
                {
                    "date": 1751226957451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n \n // Initialize Prisma client\n export const prisma = new PrismaClient();\n \n+app.set('trust proxy', 1);\n // Security middleware\n app.use(helmet());\n \n // Updated CORS configuration\n@@ -49,9 +50,15 @@\n };\n \n const allowedOrigins = process.env.NODE_ENV === 'production'\n   ? getProductionAllowedOrigins()\n-  : ['http://localhost:4200', 'http://localhost:3000', 'http://localhost:8080', 'http://localhost:5173']; // Development origins\n+  : [\n+      'http://localhost:4200', \n+      'http://localhost:3000', \n+      'http://localhost:8080', \n+      'http://localhost:5173',\n+      'https://prayer-partner-frontend.vercel.app' // Add your Vercel URL here\n+    ];\n \n if (process.env.NODE_ENV === 'production' && allowedOrigins.length === 0) {\n   logger.warn('FRONTEND_PRODUCTION_URLS is not set or is empty. CORS might block frontend requests in production.');\n }\n@@ -102,18 +109,18 @@\n   res.send('Prayer Partners API is running');\n });\n \n // Health check endpoint for Render\n-app.get('/api/health', (_req, res) => {\n+app.get('/health', (_req, res) => {\n   res.status(200).json({ status: 'ok' });\n });\n \n // Register routes\n-app.use('/api/auth', authLimiter, authRoutes);\n-app.use('/api/users', userRoutes);\n-app.use('/api/pairings', pairingRoutes);\n-app.use('/api/themes', themeRoutes);\n-app.use('/api/prayer-requests', prayerRequestRoutes);\n+app.use('/auth', authLimiter, authRoutes);\n+app.use('/users', userRoutes);\n+app.use('/pairings', pairingRoutes);\n+app.use('/themes', themeRoutes);\n+app.use('/prayer-requests', prayerRequestRoutes);\n \n // Schedule weekly pairing generation in production\n if (process.env.NODE_ENV === 'production') {\n   schedulePairingGeneration();\n"
                }
            ],
            "date": 1746509725702,
            "name": "Commit-0",
            "content": "import express, { Express, Request, Response } from 'express';\nimport dotenv from 'dotenv';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport rateLimit from 'express-rate-limit';\nimport { PrismaClient } from '@prisma/client';\nimport { errorHandler } from './middleware/error.middleware';\nimport logger, { requestLogger, errorLogger } from './utils/logger.util';\nimport fs from 'fs';\nimport path from 'path';\n\n// Import routes\nimport authRoutes from './routes/auth.routes';\nimport userRoutes from './routes/user.routes';\nimport pairingRoutes from './routes/pairing.routes';\nimport themeRoutes from './routes/theme.routes';\nimport prayerRequestRoutes from './routes/prayer-request.routes';\n\n// Import services\nimport { schedulePairingGeneration } from './services/scheduler.service';\n\n// Load environment variables\ndotenv.config();\n\n// Initialize Express app\nconst app: Express = express();\nconst port = process.env.PORT || 3000;\n\n// Create logs directory if it doesn't exist\nconst logsDir = path.join(__dirname, '../logs');\nif (!fs.existsSync(logsDir)) {\n  fs.mkdirSync(logsDir, { recursive: true });\n  logger.info('Created logs directory');\n}\n\n// Initialize Prisma client\nexport const prisma = new PrismaClient();\n\n// Security middleware\napp.use(helmet());\napp.use(cors({\n  origin: process.env.FRONTEND_URL || 'http://localhost:4200',\n  credentials: true\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n});\n\n// Apply rate limiting to all routes\napp.use(limiter);\n\n// Rate limits for authentication routes\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 20 // limit each IP to 20 login attempts per 15 minutes\n});\n\n// Apply request logger middleware\napp.use(requestLogger);\n\napp.use(express.json());\n\n// Basic route\napp.get('/', (_req: Request, res: Response) => {\n  res.send('Prayer Partners API is running');\n});\n\n// Health check endpoint for Render\napp.get('/api/health', (_req, res) => {\n  res.status(200).json({ status: 'ok' });\n});\n\n// Register routes\napp.use('/api/auth', authLimiter, authRoutes);\napp.use('/api/users', userRoutes);\napp.use('/api/pairings', pairingRoutes);\napp.use('/api/themes', themeRoutes);\napp.use('/api/prayer-requests', prayerRequestRoutes);\n\n// Schedule weekly pairing generation in production\nif (process.env.NODE_ENV === 'production') {\n  schedulePairingGeneration();\n}\n\n// Handle graceful shutdown\nprocess.on('SIGINT', async () => {\n  await prisma.$disconnect();\n  process.exit(0);\n});\n\n// Global error logger and handler\napp.use(errorLogger);\napp.use(errorHandler);\n\n// Configure CORS for production\nconst corsOptions = {\n  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',\n  methods: ['GET', 'POST', 'PUT', 'DELETE'],\n  credentials: true,\n};\napp.use(cors(corsOptions));\n\n// Increase rate limits for production\nconst productionLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // 100 requests per windowMs\n});\n\nif (process.env.NODE_ENV === 'production') {\n  app.use(productionLimiter);\n}\n\n// Start server\nprisma.$connect()\n  .then(() => {\n    logger.info('Database connection established');\n    app.listen(port, () => {\n      logger.info(`Server is running at http://localhost:${port}`);\n    });\n  })\n  .catch((error) => {\n    logger.error('Database connection failed', { error: error.message, stack: error.stack });\n    process.exit(1);\n  });\n"
        }
    ]
}