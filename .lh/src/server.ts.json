{
    "sourceFile": "src/server.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746509725702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746509725702,
            "name": "Commit-0",
            "content": "import express, { Express, Request, Response } from 'express';\nimport dotenv from 'dotenv';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport rateLimit from 'express-rate-limit';\nimport { PrismaClient } from '@prisma/client';\nimport { errorHandler } from './middleware/error.middleware';\nimport logger, { requestLogger, errorLogger } from './utils/logger.util';\nimport fs from 'fs';\nimport path from 'path';\n\n// Import routes\nimport authRoutes from './routes/auth.routes';\nimport userRoutes from './routes/user.routes';\nimport pairingRoutes from './routes/pairing.routes';\nimport themeRoutes from './routes/theme.routes';\nimport prayerRequestRoutes from './routes/prayer-request.routes';\n\n// Import services\nimport { schedulePairingGeneration } from './services/scheduler.service';\n\n// Load environment variables\ndotenv.config();\n\n// Initialize Express app\nconst app: Express = express();\nconst port = process.env.PORT || 3000;\n\n// Create logs directory if it doesn't exist\nconst logsDir = path.join(__dirname, '../logs');\nif (!fs.existsSync(logsDir)) {\n  fs.mkdirSync(logsDir, { recursive: true });\n  logger.info('Created logs directory');\n}\n\n// Initialize Prisma client\nexport const prisma = new PrismaClient();\n\n// Security middleware\napp.use(helmet());\napp.use(cors({\n  origin: process.env.FRONTEND_URL || 'http://localhost:4200',\n  credentials: true\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n});\n\n// Apply rate limiting to all routes\napp.use(limiter);\n\n// Rate limits for authentication routes\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 20 // limit each IP to 20 login attempts per 15 minutes\n});\n\n// Apply request logger middleware\napp.use(requestLogger);\n\napp.use(express.json());\n\n// Basic route\napp.get('/', (_req: Request, res: Response) => {\n  res.send('Prayer Partners API is running');\n});\n\n// Health check endpoint for Render\napp.get('/api/health', (_req, res) => {\n  res.status(200).json({ status: 'ok' });\n});\n\n// Register routes\napp.use('/api/auth', authLimiter, authRoutes);\napp.use('/api/users', userRoutes);\napp.use('/api/pairings', pairingRoutes);\napp.use('/api/themes', themeRoutes);\napp.use('/api/prayer-requests', prayerRequestRoutes);\n\n// Schedule weekly pairing generation in production\nif (process.env.NODE_ENV === 'production') {\n  schedulePairingGeneration();\n}\n\n// Handle graceful shutdown\nprocess.on('SIGINT', async () => {\n  await prisma.$disconnect();\n  process.exit(0);\n});\n\n// Global error logger and handler\napp.use(errorLogger);\napp.use(errorHandler);\n\n// Configure CORS for production\nconst corsOptions = {\n  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',\n  methods: ['GET', 'POST', 'PUT', 'DELETE'],\n  credentials: true,\n};\napp.use(cors(corsOptions));\n\n// Increase rate limits for production\nconst productionLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // 100 requests per windowMs\n});\n\nif (process.env.NODE_ENV === 'production') {\n  app.use(productionLimiter);\n}\n\n// Start server\nprisma.$connect()\n  .then(() => {\n    logger.info('Database connection established');\n    app.listen(port, () => {\n      logger.info(`Server is running at http://localhost:${port}`);\n    });\n  })\n  .catch((error) => {\n    logger.error('Database connection failed', { error: error.message, stack: error.stack });\n    process.exit(1);\n  });\n"
        }
    ]
}